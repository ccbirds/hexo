<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速重装win10系统</title>
      <link href="/2020/03/18/%E5%BF%AB%E9%80%9F%E9%87%8D%E8%A3%85win10%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/03/18/%E5%BF%AB%E9%80%9F%E9%87%8D%E8%A3%85win10%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>怎么快速的给自己的电脑重装一个系统？</p><hr><h3 id="1、下载win镜像"><a href="#1、下载win镜像" class="headerlink" title="1、下载win镜像"></a>1、下载win镜像</h3><hr><p>可以在I Tell You 上下载纯净版win10镜像，<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a> </p><p>X64为64位的，X86为32位的，正常个人使电脑选择consumer editions。下面为迅雷的链接，打开迅雷就可以下载了。大家根据自己电脑情况下载相应版本。不要把镜像下载到一会要装系统的分区（桌面也是在C盘哦）！</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win%E9%95%9C%E5%83%8F.png" alt></p><a id="more"></a><hr><h3 id="2、制作优盘启动工具"><a href="#2、制作优盘启动工具" class="headerlink" title="2、制作优盘启动工具"></a>2、制作优盘启动工具</h3><hr><p>下载大白菜优盘启动盘制作工具,下载地址：<a href="http://www.dabaicai.pw/" target="_blank" rel="noopener">http://www.dabaicai.pw/</a> </p><p>推荐大家下载UEFI版。下载后安装并启动大白菜，插入优盘。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/dabaicai1.png" alt></p><p>设备选择自己的优盘，其他默认即可。点开始制作。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/dabaicai2.png" alt></p><p>会删除优盘里面的文件，重要文件提前备份。稍等几分钟。制作完成后可以尝试模拟启动。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/dabaicai3.png" alt>4</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/dabaicai4.png" alt></p><p>优盘启动盘制作就完成了。</p><hr><h3 id="3、进入bios"><a href="#3、进入bios" class="headerlink" title="3、进入bios"></a>3、进入bios</h3><hr><p>重启电脑进行电脑bios。各品牌电脑进入bios的热键不太一样，大家可以百度一下自己电脑怎么进入bios。我以联想笔记本为例。联想笔记本左边有一个小孔，用针往里按一下，会有按键按下的感觉。开机时，不按电源键，按一下这个小孔就会进入bios。</p><p>进入bios，选择BIOS setup,</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/bios1.jpg" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/bios2.jpg" alt></p><p>进入后选择Boot，修改Boot Mode为UEFI模式，之后选择Exit，选择退出并保存。</p><p>再次进入bios，选择Boot Menu，</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/bios3.jpg" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/bios4.jpg" alt></p><p>选择从优盘启动，USB HDD。我的优盘是金士顿的。确定，大白菜优盘启动。</p><hr><h3 id="4、大白菜优盘启动"><a href="#4、大白菜优盘启动" class="headerlink" title="4、大白菜优盘启动"></a>4、大白菜优盘启动</h3><hr><p>成功进入大白菜。</p><p>如果硬盘还没有安装过系统，一定要重新分一下区，使用DIskGenius工具。选择快速分区，分区类型为GUID，一定要创建ESP和MSR分区。点确定开始建立分区 。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%88%86%E5%8C%BA1.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%A4%A7%E7%99%BD%E8%8F%9C1.png" alt></p><p>点浏览，选择刚才下载的win10镜像。可以选择win10的不同版本，至于各版本有什么不同，在此不多赘述，大家可以自己搜索一下。正常家用看电影办公选择家庭的就可以。如果个人有些开发的需要，选择专业的就可以。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%A4%A7%E7%99%BD%E8%8F%9C2.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%A4%A7%E7%99%BD%E8%8F%9C3.png" alt></p><p>选择系统将要安装的位置，不要选错了！</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%A4%A7%E7%99%BD%E8%8F%9C4.png" alt></p><p>选择全自动安装，其他默认即可。等待一会。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%A4%A7%E7%99%BD%E8%8F%9C5.png" alt></p><p>制作完成会提示你重启电脑，重启电脑，此时拔掉优盘。</p><hr><h3 id="5、win10安装设置"><a href="#5、win10安装设置" class="headerlink" title="5、win10安装设置"></a>5、win10安装设置</h3><hr><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%851.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%852.png" alt></p><p>win10开始系统准备，等一会，可能需要一段时间。会重启几次。之后依次根据提示设置。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%853.png" alt></p><p>![](<a href="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10安装" target="_blank" rel="noopener">https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10安装</a> 4.png)</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%856.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%857.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%858.png" alt></p><p>有账户可以登录一下，没有就点左下的脱机账户。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8570.png" alt></p><p>没有账户就选择有限体验，实际上Microsoft的应用和服务咱们是不用的，有没有就无所谓了。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8510.png" alt></p><p>输入用户名。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8511.png" alt></p><p>输入登录密码。输入两次。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8512.png" alt></p><p>设置3个安全问题。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8513.png" alt></p><p>点否即可。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8514.png" alt></p><p>根据自己需要选择。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8515.png" alt></p><p>根据自己需要选择。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/win10%E5%AE%89%E8%A3%8520.png" alt></p><p>到这里，系统就装完了。</p><hr><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> 系统重装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文工具推荐</title>
      <link href="/2020/03/15/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
      <url>/2020/03/15/%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>在这里给大家安利几款软件，都是在写论文过程中常用的软件。</p><p>由于这些软件我都已经安装过了，所以没有给出详细的安装过程，不过均给出了相关的教程地址。</p><hr><h3 id="首先就是office和wps"><a href="#首先就是office和wps" class="headerlink" title="首先就是office和wps"></a>首先就是office和wps</h3><hr><a id="more"></a><p>这俩款软件，不需要多说，大家都在用。至于用哪个，看大家使用习惯。</p><p>wps可以从官网上下载安装包，安装. <a href="https://www.wps.cn/" target="_blank" rel="noopener">https://www.wps.cn/</a></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/wps1.png" alt></p><p>office,如果是个人使用，不用商业用途可以在微信公众号==软件安装管家==上获取最新的破解版本。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E5%AE%B61.png" alt></p><p>点软件目录，里面有很多专业工具。里面有安装教程，我就不再说明了。</p><h4 id="仅可用于个人使用"><a href="#仅可用于个人使用" class="headerlink" title="仅可用于个人使用"></a>仅可用于个人使用</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E7%AE%A1%E5%AE%B62.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/word1.png" alt></p><hr><h3 id="画框图工具"><a href="#画框图工具" class="headerlink" title="画框图工具"></a>画框图工具</h3><hr><p>要写论文过程中，框图电路图等，是论文中的必要元素，通常大家可能会使用visio画图，今天我再给大家推荐一款软件==亿图==也是一款画图软件，功能比较强大，个人感觉，亿图比较好用。</p><p>visio：同样在公众号里会有最新版本有visio。此处不再赘述。</p><p>亿图：也是一款收费软件，如果大家是个人使用，可以点击链接下载破解版<a href="https://www.lanzous.com/iaakh4b" target="_blank" rel="noopener">https://www.lanzous.com/iaakh4b</a></p><p>压缩包内有详细的安装和破解过程，另外，亿可以导出多种格式，非常方便。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E4%BA%BF%E5%9B%BE1.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E4%BA%BF%E5%9B%BE2.png" alt></p><hr><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><hr><p>框图和电路图画好了，在数据结果部分可能需要画图表，图表可以使用excel来画，不过想让图表美观一点，可能有点费力了。最常用的是MATLAB来画图和渲染，matlab的下载和安装，同样在微信公众号软件安管家上可以找到。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/matlab1.png" alt="盗一张图"></p><hr><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><hr><p>写论文时难免会需要输入一些公式，尤其是理工科。常用的公式编辑器为mathtype。</p><p><a href="https://www.mathtype.cn/" target="_blank" rel="noopener">https://www.mathtype.cn/</a> 大家可以在官网下载安装使用</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/mathtype1.png" alt></p><p>再给大家安利一款公式软件，它不是用来写公式的而是用来识别公式，截图需要识别的公式，它会自己识别公式，可以转为latex语言，也可以直接放入word中。下载地址<a href="https://mathpix.com/" target="_blank" rel="noopener">https://mathpix.com/</a> 选择相应的版本下载安装即可。需要注册登录才能下载，是free的。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/mathpix1.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/mathpix2.png" alt></p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><hr><p>参考文献的引用，如果按格式一个一个输入，很慢的。给大家推荐一个网址，可以批量引用参考文献—百度学术<a href="http://xueshu.baidu.com/" target="_blank" rel="noopener">http://xueshu.baidu.com/</a> </p><p>输入参考文献名称或者关键字，点批量引用。点右下角的图标。选择引用格式一键复制即可。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E7%99%BE%E5%BA%A6%E5%AD%A6%E6%9C%AF2.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E7%99%BE%E5%BA%A6%E5%AD%A6%E6%9C%AF1.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E7%99%BE%E5%BA%A6%E5%AD%A6%E6%9C%AF3.png" alt></p><p>这是一些常用的论文工具，如有没有提及或者表述不对之处，希望大家帮我指出来</p><hr><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 写论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nanopi性能测试unixbench</title>
      <link href="/2020/03/12/nanopi%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95UnixBench/"/>
      <url>/2020/03/12/nanopi%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95UnixBench/</url>
      
        <content type="html"><![CDATA[<p>入手nanopi不知道它的性能怎么样，下面我们来使用unixbench，对nanopi跑分测试一下</p><hr><p>只需要简单的三个命令就可以</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs zsh">$ wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh<br>$ chmod +x unixbench.sh<br>$ sudo ./unixbench.sh  //会自动检查依赖<br></code></pre></td></tr></table></figure><a id="more"></a><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/unixbench1.png" alt></p><p>时间有点长，稍等一会</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/unixbench2.png" alt></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs zsh">========================================================================<br>   BYTE UNIX Benchmarks (Version 5.1.3)<br><br>   System: NanoPi-NEO2-Black: GNU/Linux<br>   OS: GNU/Linux -- 4.14.111 -- <span class="hljs-comment">#1 SMP Thu Dec 19 19:12:27 CST 2019</span><br>   Machine: aarch64 (aarch64)<br>   Language: en_US.utf8 (charmap=<span class="hljs-string">"UTF-8"</span>, collate=<span class="hljs-string">"UTF-8"</span>)<br>   10:22:26 up 18 min,  3 users,  load average: 0.68, 0.52, 0.32; runlevel 5<br><br>------------------------------------------------------------------------<br>Benchmark Run: Fri Mar 13 2020 10:22:26 - 10:50:55<br>0 CPUs <span class="hljs-keyword">in</span> system; running 1 parallel copy of tests<br><br>Dhrystone 2 using register variables        6580436.9 lps   (10.0 s, 7 samples)<br>Double-Precision Whetstone                     1155.9 MWIPS (10.0 s, 7 samples)<br>Execl Throughput                               1316.7 lps   (29.9 s, 2 samples)<br>File Copy 1024 bufsize 2000 maxblocks        145034.8 KBps  (30.0 s, 2 samples)<br>File Copy 256 bufsize 500 maxblocks           45162.1 KBps  (30.0 s, 2 samples)<br>File Copy 4096 bufsize 8000 maxblocks        351000.7 KBps  (30.0 s, 2 samples)<br>Pipe Throughput                              440132.8 lps   (10.0 s, 7 samples)<br>Pipe-based Context Switching                  66182.3 lps   (10.0 s, 7 samples)<br>Process Creation                               2560.7 lps   (30.0 s, 2 samples)<br>Shell Scripts (1 concurrent)                   1991.9 lpm   (60.0 s, 2 samples)<br>Shell Scripts (8 concurrent)                    656.1 lpm   (60.1 s, 2 samples)<br>System Call Overhead                         785715.5 lps   (10.0 s, 7 samples)<br><br>System Benchmarks Index Values               BASELINE       RESULT    INDEX<br>Dhrystone 2 using register variables         116700.0    6580436.9    563.9<br>Double-Precision Whetstone                       55.0       1155.9    210.2<br>Execl Throughput                                 43.0       1316.7    306.2<br>File Copy 1024 bufsize 2000 maxblocks          3960.0     145034.8    366.2<br>File Copy 256 bufsize 500 maxblocks            1655.0      45162.1    272.9<br>File Copy 4096 bufsize 8000 maxblocks          5800.0     351000.7    605.2<br>Pipe Throughput                               12440.0     440132.8    353.8<br>Pipe-based Context Switching                   4000.0      66182.3    165.5<br>Process Creation                                126.0       2560.7    203.2<br>Shell Scripts (1 concurrent)                     42.4       1991.9    469.8<br>Shell Scripts (8 concurrent)                      6.0        656.1   1093.5<br>System Call Overhead                          15000.0     785715.5    523.8<br>                                                                   ========<br>System Benchmarks Index Score                                         372.0<br><br><br><br>======= Script description and score comparison completed! =======<br></code></pre></td></tr></table></figure><p>这是结果，分不是很高。</p><hr><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> nanopi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nanopi </tag>
            
            <tag> unixbench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nanopi安装oh my zsh</title>
      <link href="/2020/03/10/nanopi%E5%AE%89%E8%A3%85oh_my_zsh/"/>
      <url>/2020/03/10/nanopi%E5%AE%89%E8%A3%85oh_my_zsh/</url>
      
        <content type="html"><![CDATA[<p>nanopi是基于ubuntu16.04LTS，自带的bash终端总觉的有点不舒服，有一款终端不错还可以更换主题。oh my zsh。<a href="https://ohmyz.sh/" target="_blank" rel="noopener">https://ohmyz.sh/</a> </p><p>下面我们来反nanopi的终端美化一下。</p><hr><p>首先安装zsh，我们先看一下，我们有没有zsh。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /etc/shells<br>/bin/sh<br>/bin/dash<br>/bin/bash<br>/bin/rbash<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span>  //查看我们当前使用的shell<br>/bin/bash<br></code></pre></td></tr></table></figure><p>当前，我们是没有安装zsh的。使用的是默认的bash。</p><a id="more"></a><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><hr><p>先安装zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install zsh<br>Reading package lists... Done<br>Building dependency tree <br>Reading state information... Done<br>The following packages were automatically installed and are no longer required:<br>  aspell aspell-en dictionaries-common emacsen-common libaspell15 libenca0 libfaad2 libjack-jackd2-0 libmodplug1<br>  libmpcdec6 libopus0 libopusfile0 librcc0 librcd0 libresid-builder0c2a libsidplay2v5 libsidutils0 libspeex1<br>  libtag1v5 libtag1v5-vanilla libtagc0 libtext-iconv-perl<br>Use <span class="hljs-string">'sudo apt autoremove'</span> to remove them.<br>The following additional packages will be installed:<br>  zsh-common<br>Suggested packages:<br>  zsh-doc<br>The following NEW packages will be installed:<br>  zsh zsh-common<br>0 upgraded, 2 newly installed, 0 to remove and 250 not upgraded.<br>Need to get 3,724 kB of archives.<br>After this operation, 14.0 MB of additional disk space will be used.<br>Do you want to <span class="hljs-built_in">continue</span>? [Y/n] y<br>Get:1 http://mirrors.ustc.edu.cn/ubuntu-ports xenial-security/main arm64 zsh-common all 5.1.1-1ubuntu2.3 [3,182 kB]<br>Get:2 http://mirrors.ustc.edu.cn/ubuntu-ports xenial-security/main arm64 zsh arm64 5.1.1-1ubuntu2.3 [542 kB]<br>Fetched 3,724 kB <span class="hljs-keyword">in</span> 5s (648 kB/s)<br>debconf: delaying package configuration, since apt-utils is not installed<br>Selecting previously unselected package zsh-common.<br>(Reading database ... 45962 files and directories currently installed.)<br>Preparing to unpack .../zsh-common_5.1.1-1ubuntu2.3_all.deb ...<br>Unpacking zsh-common (5.1.1-1ubuntu2.3) ...<br>Selecting previously unselected package zsh.<br>Preparing to unpack .../zsh_5.1.1-1ubuntu2.3_arm64.deb ...<br>Unpacking zsh (5.1.1-1ubuntu2.3) ...<br>Setting up zsh-common (5.1.1-1ubuntu2.3) ...<br>Setting up zsh (5.1.1-1ubuntu2.3) ...<br>update-alternatives: using /bin/zsh5 to provide /bin/zsh (zsh) <span class="hljs-keyword">in</span> auto mode<br>update-alternatives: using /bin/zsh5 to provide /bin/rzsh (rzsh) <span class="hljs-keyword">in</span> auto mode<br></code></pre></td></tr></table></figure><p>查看一下有没有安装上，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat /etc/shells<br>/bin/sh<br>/bin/dash<br>/bin/bash<br>/bin/rbash<br>/bin/zsh<br>/usr/bin/zsh   //已经有zsh了<br></code></pre></td></tr></table></figure><p>把zsh修改为默认shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><p>安装oh my zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sh -c <span class="hljs-string">"<span class="hljs-variable">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>"</span><br></code></pre></td></tr></table></figure><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/nanopi_ohmyzsh.png" alt></p><p>这样就安装上了</p><hr><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><hr><p>更改主题和加插件，编辑文件==~/.zshrc==</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim ~/.zshrc<br>ZSH_THEME=<span class="hljs-string">"ys"</span>   //更改主题，我比较喜欢ys<br>$ <span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/ohmyzsh1.png" alt></p><p>可以在==~/.oh-my-zsh/themes==查看都有什么主题</p><hr><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><hr><h4 id="安装autojump插件"><a href="#安装autojump插件" class="headerlink" title="安装autojump插件"></a>安装autojump插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install autojump<br>$ vim ~/.zshrc<br><span class="hljs-comment">#在最后一行加入</span><br>. /usr/share/autojump/autojump.sh<br>$ <span class="hljs-built_in">source</span> ~/.zshrc   生效<br></code></pre></td></tr></table></figure><h4 id="安装自动补齐插件"><a href="#安装自动补齐插件" class="headerlink" title="安装自动补齐插件"></a>安装自动补齐插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~/.oh-my-zsh/plugins/<br>$ mkdir incr<br>$ <span class="hljs-built_in">cd</span> incr<br>$ wget http://mimosa-pudica.net/src/incr-0.2.zsh<br>$ vim ~/.zshrc<br><span class="hljs-comment">#在最后加入 </span><br><span class="hljs-built_in">source</span> ~/.oh-my-zsh/plugins/incr/incr-0.2.zsh<br>$ <span class="hljs-built_in">source</span> ~/.zshrc 生效<br></code></pre></td></tr></table></figure><h4 id="安装语法高亮zsh-syntax-highlighting"><a href="#安装语法高亮zsh-syntax-highlighting" class="headerlink" title="安装语法高亮zsh-syntax-highlighting"></a>安装语法高亮zsh-syntax-highlighting</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~/.oh-my-zsh/plugins<br>$ vim ~/.zshrc<br>$ git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git<br><span class="hljs-comment">#在最后加入</span><br><span class="hljs-built_in">source</span> <span class="hljs-variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh<br>$ <span class="hljs-built_in">source</span> ~./zshrc<br></code></pre></td></tr></table></figure><h4 id="安装语法历史记录"><a href="#安装语法历史记录" class="headerlink" title="安装语法历史记录"></a>安装语法历史记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br>$ vim ~/.zshrc<br><span class="hljs-comment"># 修改</span><br>plugins=(git extract z zsh-autosuggestions)<br>$ <span class="hljs-built_in">source</span> ~/.xshrc<br></code></pre></td></tr></table></figure><p>现在终端好看了许多</p><hr><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> nanopi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nanopi </tag>
            
            <tag> oh my zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nanopi压力测试和散热能力</title>
      <link href="/2020/03/04/nanopi%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%92%8C%E6%95%A3%E7%83%AD%E8%83%BD%E5%8A%9B/"/>
      <url>/2020/03/04/nanopi%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%92%8C%E6%95%A3%E7%83%AD%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>上手nanopi后，一直好奇它的H5cpu性能怎么样和铝壳散热能力怎么样，下面我们来大概看一下。做一下压力测试。</p><hr><h3 id="安装两个软件"><a href="#安装两个软件" class="headerlink" title="安装两个软件"></a>安装两个软件</h3><hr><p>==stress==：对CPU施压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install stress<br></code></pre></td></tr></table></figure><a id="more"></a><p>==htop==:CPU监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install htop<br></code></pre></td></tr></table></figure><p>最好是更新一下系统。</p><hr><h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><hr><p>先连接一个ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo stress -c 4 -t 10000 -m 2 -d 2   <br>//4代表核数，10000代表时间,2代表内存进程，2代表硬盘进程<br>stress: info: [11352] dispatching hogs: 4 cpu, 0 io, 2 vm, 2 hdd<br></code></pre></td></tr></table></figure><p>内存和硬盘设置为2 个，如果设置为4 的话就会影响nanopi的ssh进程。</p><p>查看CPU情况，新打开一个SSH，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ htop<br></code></pre></td></tr></table></figure><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/nanopi_cpu1.png" alt></p><p>这是没有压力测试时候的情况，正常温度23左右，下面我们来进行压力测试。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/nanopi_cpu2.png" alt></p><p>一段时间后，温度稳定在60度，4个CPU均跑满了，内存用了一半。铝壳的散热现在还是压的住的。功率增加了一倍多。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo stress -c 4 -t 10000 -m 3 -d 2<br></code></pre></td></tr></table></figure><p>此时oled程序基本卡住，cpu跑满，内存700M左右，温度的话，铝壳散热是盖住了，大约70度，具体的就不知道了，oled显示已经乱了。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/cpu3.png" alt></p><p>开始真正的烧机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo stress -c 4 -t 10000 -m 4 -d 4<br></code></pre></td></tr></table></figure><p>ssh已经开始连接不稳定，oled彻底罢工。温度还可以，</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/cpu4.png" alt></p><p>作死跑了一个5cpu进程，还在运行，但其他进程已经不能正常工作了。</p><p>总体来说，这个nanopi还可以，铝壳散热完全盖的住。4核的H5也是完全ok。</p><hr><p>【参考】<a href="https://blog.csdn.net/qq_42869041/article/details/83834584" target="_blank" rel="noopener">https://blog.csdn.net/qq_42869041/article/details/83834584</a></p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> nanopi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nanopi </tag>
            
            <tag> H5 cpu </tag>
            
            <tag> 压力测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将静态博客托管在nanopi上</title>
      <link href="/2020/03/01/%E5%B0%86%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E5%9C%A8nanopi%E4%B8%8A/"/>
      <url>/2020/03/01/%E5%B0%86%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%89%98%E7%AE%A1%E5%9C%A8nanopi%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>最近买了一个nanopi，里面运行的是Ubuntu，可以做很多事情，我便想到用来做我博客的服务器。这前我是把我的博客托管在Github上。Github在国内的速度还是比较慢的。而且以前有被墙过。</p><hr><p>在nanopi上安装nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install nginx<br></code></pre></td></tr></table></figure><a id="more"></a><p>编辑nginx的设置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>在http里面加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>                listen          80 default_server;<br>                server_name     ccbirds.cn;//自己的域名<br>                root            /home/fa/hexo-blog; //<span class="hljs-built_in">clone</span>下来的位置<br>                location / &#123;<br>                &#125;<br>        &#125;<br><br>        server &#123;<br>                listen          80;<br>                server_name     www.ccbirds.cn;<br>                <span class="hljs-built_in">return</span>          301 http://ccbirds.cn<span class="hljs-variable">$request_uri</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>开启nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo service nginx start  //启动命令<br>$ sudo service nginx stop   //停止命令<br>$ sudo service nginx restart  //重启命令<br></code></pre></td></tr></table></figure><p>如果报错，根据提示查看报错原因，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo nginx -t  //查看配置文件是否有问题<br>$ ps -ef | grep nginx  //显示nginx的进程<br>$ sudo <span class="hljs-built_in">kill</span> -quit 14952  //杀死进程<br></code></pre></td></tr></table></figure><p>现在使用IP或者域名就可以访问了。</p><hr><p>可是每次更新博客都要手动clone一下吗？</p><p>网上有使用webhooks自动部署的方法，不过本人比较笨，没有弄好，感兴趣的可以试试，成功了记得告诉我一声。</p><p>我采用了比较笨的一种方法，每天定时删除hexo-log，定时重新clone一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ crontab -e <br>//在最后加上两句<br>0 0 * * * sudo rm -rf /home/fa/hexo-blog  //每天零点删除hexo-blog<br>5 0 * * * sudo git <span class="hljs-built_in">clone</span> https://github.com/ccbirds/ccbirds.github.io.git /home/fa/hexo-blog  //每天零点五分 重新<span class="hljs-built_in">clone</span><br>$ sudo service cron restart  //重启cron<br>$ service cron restart<br></code></pre></td></tr></table></figure><p>五个* * * * *<br>对应的分别是 分 时 天 月 周</p><p>不是很完美，先这样吧。</p><hr><p>遇到的问题：</p><p>启动nginx时，报错，80端口已经被占用，看了一下进程，发现是nginx自己占用了80端口。使用nginx -t 看一下问题，是/etc/nginx/sites-enabled/default这个也在使用80端口，把这里的80改成其他端口就没有问题了</p><hr><p>欢迎大家访问！</p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> nanopi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nanopi </tag>
            
            <tag> 博客托管 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markedown云笔记，typora+坚果云+picgo+github图床+阿里云图床</title>
      <link href="/2020/03/01/markedown%E4%BA%91%E7%AC%94%E8%AE%B0%EF%BC%8Ctypora+%E5%9D%9A%E6%9E%9C%E4%BA%91+picgo+github%E5%9B%BE%E5%BA%8A+%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BE%E5%BA%8A/"/>
      <url>/2020/03/01/markedown%E4%BA%91%E7%AC%94%E8%AE%B0%EF%BC%8Ctypora+%E5%9D%9A%E6%9E%9C%E4%BA%91+picgo+github%E5%9B%BE%E5%BA%8A+%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>平时在弄一些东西想记一些笔记，要不等弄完也就弄完了，几乎忘了怎么弄的，最好用笔记记录一下。首先尝试了一下印象笔记，免费用户可以两个设备同步，每个月还有流量限制，主要是照片比较多，一个月的流量很可能不来够，果断放弃。</p><p>考虑用markdown来记录一些东西，因为写博客也是用的markdown，写点代码什么的比较方便。上网搜了一下，使用typroa和坚果云可以实现云同步。typroa界面十分简洁清爽，非常舒服。坚果云的空间没有其他网盘大，但主打的是同步，每个月有1G的上传和3G的下载，对于只是同步 一下md文档，完全够用了。可是又有一个新的问题。图片怎么办？对于我这个时不时就截图的人来说，这个问题很致命。很巧typroa支持使用picgo上传图片。picgo是一个上传图片到图床的一个软件。图床的选择，免费的是Github，不过毕竟是免费的，大家都懂，七牛云，据说用的比较多，不过因为域名只能用一段时间，这后就需要使用自己备案过的域名，感觉不方便，所以考虑到阿里云和腾讯云，比较了一下，价钱的话差不多，实际上都用不了多少钱。个人感觉阿里云做的比较好。所以使用typora+坚果云+picgo+github图床+阿里云图床。这样即解决了笔记问题也解决了博客图床的问题。</p><p>最重要的是typroa、坚果云、picgo都是支持windows macos 和linux。</p><p>下面以windows为例介绍一下。</p><a id="more"></a><hr><h3 id="typroa"><a href="#typroa" class="headerlink" title="typroa"></a>typroa</h3><hr><p><a href="https://typora.io/" target="_blank" rel="noopener">下载地址</a></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/typroadownload.png" alt></p><p>选择对应的版本，下载安装。</p><p>安装后，打开 文件-&gt;偏好设置-&gt;图像</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/typroa-img1.png" alt></p><p>选择上传图片，上传服务选择PicGo（app），路径选择一会安装PicGo的路径。</p><p>其他设置，大家可以根据自己的喜好设置。</p><hr><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><hr><p><a href="https://www.jianguoyun.com/s/downloads" target="_blank" rel="noopener">下载地址</a></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%9D%9A%E6%9E%9C%E4%BA%91%E4%B8%8B%E8%BD%BD.png" alt></p><p>选择对应的版本下载，安装（安装过程没有截图，大家按照提示安装就可以）。最后把typroa的md文件保存在坚果云的同步文件夹下就可以了。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%9D%9A%E6%9E%9C%E4%BA%91.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%90%8C%E6%AD%A5.png" alt></p><hr><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><hr><p><a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">下载地址</a></p><p>picgo是Github开源项目，大家下载自己需要的版本，其他平台大家可以参考文档安装。windows选择exe文件。安装后启动，刚开始不会有界面，右下角图标单击或者右键可以打开界面。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/picgo%E2%80%94download.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/picgo1.png" alt></p><p>到这里不要忘了去typroa上找一下picgo的安装路径。</p><hr><h3 id="Github图床"><a href="#Github图床" class="headerlink" title="Github图床"></a>Github图床</h3><hr><p><a href="https://github.com/" target="_blank" rel="noopener">github.com</a></p><p>新建一个仓库，用做图床。（一定要公开不要私密，要不别人看不到图片）</p><p>setting-&gt;developer setting-&gt;personal access tokens</p><p>点generate new token</p><p>note 随便填，下面不知道每个选项都是什么意思，跟我一样全选上。</p><p>最后generate token</p><p>记住生成的token秘钥，</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/github_setting1.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/github_setting2.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/github_setting3.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/github_setting4.png" alt></p><hr><p>打开picgo，选择Github图床。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/picgo-github.png" alt></p><p>仓库名：用户名/仓库名</p><p>分支名：master</p><p>token：刚才生成的token秘钥</p><p>存储路径：是仓库下新建一个文件夹来作为图床，后面要有/</p><p>自定义域名;<a href="https://raw.githubsercontent.com/用户名/仓库名/分支" target="_blank" rel="noopener">https://raw.githubsercontent.com/用户名/仓库名/分支</a></p><p>点确定即可。Github图床设置完成，可以上传一个图片试试。</p><p>Github主要是免费的，速度什么的就不行了。</p><hr><h3 id="阿里云图床"><a href="#阿里云图床" class="headerlink" title="阿里云图床"></a>阿里云图床</h3><hr><p><a href="https://cn.aliyun.com/" target="_blank" rel="noopener">阿里云网址</a></p><p>选择对象存储OSS，或者直接搜索也可以。购买的话，40GB一年才9元，现在买还有折扣，一年7.2元。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss1.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss2.png" alt></p><p>下单后，在控制台找到OSS。进入BUcket列表，创建bucket。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss3.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss5.png" alt></p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss6.png" alt></p><p>bucket的名称大家自己想一个。读写权限改为公共读。</p><p>确定。记住外网的两个域名。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss7.png" alt></p><p>下面来生成key。点击概览，右侧有一个常用入口，下面有一个Access Key。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss8.png" alt></p><p>进入后，点击   创建Accesskey   验证手机，会造成ID和key，最好是保存一下。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/aliyun_oss9.png" alt></p><hr><p>打开picgo，进入阿里云oss设置。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/picgo-aliyun.png" alt></p><p>keyid和keysecrect是刚才生成的ID和key。</p><p>存储空间名是bucket的名</p><p>存储区域是全世外网访问节点 去掉aliyuncs.com 前面的一串。</p><p>存储路径什么的大家根据自己的喜好来。</p><hr><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>typroa验证上传时，不成功</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/typroa_upload.png" alt></p><p>原因：应该是typroa的端口与picgo的端口不对应。修改一下picgo的server端口就行。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/picgo-server.png" alt></p><p>测试一下，成功了。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/typroa-upload1.png" alt></p><hr><p>到这里就完事了！</p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> typroa </tag>
            
            <tag> picgo </tag>
            
            <tag> github 图床 </tag>
            
            <tag> 坚果云 </tag>
            
            <tag> 云笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nanopi_neo2_black_防烧屏设置</title>
      <link href="/2020/02/28/nanopi-neo2-black-%E9%98%B2%E7%83%A7%E5%B1%8F%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/02/28/nanopi-neo2-black-%E9%98%B2%E7%83%A7%E5%B1%8F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>oled长时间点亮一个点，付出现烧屏现象，为了避免烧屏。我们将oled设置为闪屏。</p><hr><p>关于oled模块驱动的安装，可以参考<a href="http://wiki.friendlyarm.com/wiki/index.php/NanoHat_OLED" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/friendlyarm/NanoHatOLED.git<br>$ <span class="hljs-built_in">cd</span> NanoHatOLED<br>$ sudo -H ./install.sh<br></code></pre></td></tr></table></figure><a id="more"></a><hr><h4 id="cd到oled源文件目录-修改两个文件"><a href="#cd到oled源文件目录-修改两个文件" class="headerlink" title="cd到oled源文件目录,修改两个文件"></a>cd到oled源文件目录,修改两个文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /root/NanoHatOLED/BakeBit/Software/Python<br>//使用python控制<br>$ sudo vim bakebit_nanohat_oled.py<br>//加入一条语句<br><span class="hljs-keyword">while</span> True:<br>    try:        <br>        oled.clear_raw() //加入这个语句，其他语句不变<br>        draw_page()<br>        lock.acquire()<br>        page_index = pageIndex<br>        lock.release()<br>   <br>$ sudo vim bakebit_128_64_oled.py<br>//加入下面的函数<br>def clear_raw():<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(8):<br>        setTextXY(0,j)    <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(16):  <span class="hljs-comment">#clear all columns</span><br>            putChar(<span class="hljs-string">' '</span>)<br></code></pre></td></tr></table></figure><h4 id="清除原进程，启动新进程"><a href="#清除原进程，启动新进程" class="headerlink" title="清除原进程，启动新进程"></a>清除原进程，启动新进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ps aux | grep python //查看进程<br>root     25913  3.8  1.4  22380 14648 pts/0    S    14:23   0:35 python bakebit_nanohat_oled.py<br>pi       26617  0.0  0.0   7284   544 pts/0    S+   14:39   0:00 grep --color=auto python<br>$ sudo pkill -f bakebit_nanohat_oled.py <br>//结束进程<br>$ sudo python bakebit_nanohat_oled.py<br>// 重启进程 <br>$ sudo python bakebit_nanohat_oled.py &amp;<br>// 重启进程 后台运行<br></code></pre></td></tr></table></figure><hr><p>这样就不会烧屏了！</p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> nanopi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nanopi </tag>
            
            <tag> python </tag>
            
            <tag> oled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nanopi neo2 black 音乐闹钟</title>
      <link href="/2020/02/28/nanopi-neo2-black-%E9%9F%B3%E4%B9%90%E9%97%B9%E9%92%9F/"/>
      <url>/2020/02/28/nanopi-neo2-black-%E9%9F%B3%E4%B9%90%E9%97%B9%E9%92%9F/</url>
      
        <content type="html"><![CDATA[<p>nanopi neo2 black 有音频接口，可以用它来放个音乐，折腾一下做个音乐闹钟吧。</p><hr><h3 id="首先查看cron是否运行"><a href="#首先查看cron是否运行" class="headerlink" title="首先查看cron是否运行"></a>首先查看cron是否运行</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ps -ef | grep cron //查看cron是否运行<br>root       561     1  0 15:52 ?        00:00:00 /usr/sbin/cron -f<br>pi       18668 18655  0 21:07 pts/0    00:00:00 grep --color=auto cron<br></code></pre></td></tr></table></figure><a id="more"></a><p>没有运行的话，启动一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo service cron start //启动命令<br>$ sudo service cron stop  //停止命令<br>$ sudo service cron restart  //重启命令<br></code></pre></td></tr></table></figure><hr><h3 id="设置定时播放音乐"><a href="#设置定时播放音乐" class="headerlink" title="设置定时播放音乐"></a>设置定时播放音乐</h3><hr><p>安装sox用来播放mp3音乐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install sox libsox-fmt-all<br>//libsox-fmt-all包含解码器<br></code></pre></td></tr></table></figure><p>可以先播放一个音乐试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ play XXX.mp3<br></code></pre></td></tr></table></figure><p>设置定时播放音乐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ crontab -e //第一次使用会让你选择编辑器，选择vim就可以<br>//在文件末尾加<br>30 21 * * * play /home/pi/Music/XXX.mp3<br>//每天21:30播放音乐XXX.mp3<br></code></pre></td></tr></table></figure><p>五个* * * * *<br>对应的分别是 分 时 天 月 周<br>重启一个cron服务就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo service cron restart<br>$ service cron restart<br></code></pre></td></tr></table></figure><hr><p>大家每天定时听音乐吧！</p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> nanopi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nanopi </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 音乐闹钟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nanopi neo2 black 上电使用</title>
      <link href="/2020/02/27/nanopi-neo2-black-%E4%B8%8A%E7%94%B5%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/27/nanopi-neo2-black-%E4%B8%8A%E7%94%B5%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近上手一个小东西，nanopi neo2 black，非常精致，可以运行linux core ，可以运行Ubuntu 内核，感兴趣可以淘宝，或者<a href="http://nanopi.org/" target="_blank" rel="noopener">官网</a>看看。</p><hr><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/nanopi%E4%B8%801.png" alt></p><a id="more"></a><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/nanopi%E4%B8%802.jpg" alt><br>我买这个板子的时候，赠送了16GB的TF卡，里面有系统，所以我没有编译系统，关于系统的制作可以参考官方<a href="http://wiki.friendlyarm.com/wiki/index.php/NanoPi_NEO2_Black#Configure_System_with_npi-config" target="_blank" rel="noopener">文档</a></p><hr><h3 id="1-通过ssh连接"><a href="#1-通过ssh连接" class="headerlink" title="1. 通过ssh连接"></a>1. 通过ssh连接</h3><hr><p>登录方式有有三种：串口、HDMI、ssh<br>串口需要使用debug UART引脚，然而板子出厂时这个引脚是不焊的，所以暂时没有办法使用串口登录。<br>HDMI是使用提供的模块，也是通过串口debug UART连接，所以暂时也无法使用。<br>只能使用SSH登录。<br>由于身边没有路由器，无法使用有线网络。只能使用无线网卡连接网络。<br>插上网卡，接上键盘，没有显示输出，只能盲打（大家如果能使用有线，nanopi会直接获取ip，就可以跳过这步了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ su root<br>fa<br>$ nmcli r wifi on //打开wifi<br>$ nmcli dev //显示网络设备，无线网卡是wlan0<br>$ nmcli dev wifi //扫描wifi信号<br>$ nmcli dev wifi connect <span class="hljs-string">"SSID"</span> password <span class="hljs-string">"PASSWORD"</span> ifname wlan0 //连接无线网，SSID是无线网名称，PASSWORD是密码<br></code></pre></td></tr></table></figure><p>等一会就会从oled上看到IP了，使用xshell能过ssh就可以登录了，登录名pi，密码pi。root的密码fa。<br><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/nanopi%E4%B8%803.png" alt><br>这样就连接成功了。</p><hr><h3 id="2-更新"><a href="#2-更新" class="headerlink" title="2. 更新"></a>2. 更新</h3><hr><p>更改更新源为国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo vim /etc/apt/sources.list<br>//加入以下源<br>deb http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe<br>deb http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe<br>deb http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-proposed main multiverse restricted universe<br>deb http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe<br>deb http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe<br>deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial main multiverse restricted universe<br>deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-backports main multiverse restricted universe<br>deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-proposed main multiverse restricted universe<br>deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-security main multiverse restricted universe<br>deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ xenial-updates main multiverse restricted universe<br></code></pre></td></tr></table></figure><p>有点慢，大家耐心等待（也可以是我的网慢）<br>执行更新命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get update<br>$ sudo apt-get upgrade<br></code></pre></td></tr></table></figure><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/nanopi%E4%B8%804.png" alt></p><hr><h3 id="3-测网速"><a href="#3-测网速" class="headerlink" title="3.测网速"></a>3.测网速</h3><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install speedtest-cli //安装<br>$ sudo speedtest-cli //测试，有时可能测不出来<br>Retrieving speedtest.net configuration...<br>Retrieving speedtest.net server list...<br>Testing from China Mobile Guangdong (223.104.236.97)...<br>Selecting best server based on latency...<br>Hosted by ChinaMobile, Liaoning Branch,Dalian (Dalian) [247.24 km]: 75.654 ms<br>Testing download speed........................................<br>Download: 2.42 Mbit/s<br>Testing upload speed..................................................<br>Upload: 0.76 Mbit/s<br>我是热点连接，手机又被限速了所以很慢<br></code></pre></td></tr></table></figure><p>我是热点连接，手机又被限速了所以很慢</p><hr><p>大家可以为所欲为了，哈哈。</p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> nanopi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nanopi </tag>
            
            <tag> ubuntu </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下将文件备份到github</title>
      <link href="/2020/02/27/ubuntu%E4%B8%8B%E5%B0%86%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E5%88%B0github/"/>
      <url>/2020/02/27/ubuntu%E4%B8%8B%E5%B0%86%E6%96%87%E4%BB%B6%E5%A4%87%E4%BB%BD%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<p>将hexo博客目录备份到github，以防意外删除文件，这样也方便在其他设备上写博客</p><hr><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt-get install git<br></code></pre></td></tr></table></figure><a id="more"></a><h3 id="2-生成ssh-key"><a href="#2-生成ssh-key" class="headerlink" title="2.生成ssh key"></a>2.生成ssh key</h3><p>使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C “github username”<br></code></pre></td></tr></table></figure><p>会生成下面三个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">id_rsa  id_rsa.pub  known_hosts<br></code></pre></td></tr></table></figure><h3 id="3-github-setting"><a href="#3-github-setting" class="headerlink" title="3.github setting"></a>3.github setting</h3><p>登录github，setting,左边有SSH and GPG keys 选项，点new<br>ssh key。title随便写，key 填写id_rsa.pub文件中的内容。<br>新建一个仓库用来备份。<br>测试ssh key是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br>Hi ccbirds! You<span class="hljs-string">'ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h3 id="4-在需要备份的目录下初始化git"><a href="#4-在需要备份的目录下初始化git" class="headerlink" title="4.在需要备份的目录下初始化git"></a>4.在需要备份的目录下初始化git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init<br>Reinitialized existing Git repository <span class="hljs-keyword">in</span> /home/czq/blog/.git/<br></code></pre></td></tr></table></figure><h3 id="5-设置git"><a href="#5-设置git" class="headerlink" title="5.设置git"></a>5.设置git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config user.name “github user name” <br>$ git config user.email “github email”<br>$ git config user.name //查看设置的name<br>$ git config user.email //查看设置的邮箱<br>$ git remote add origin https://github.com/ccbirds/hexo.git //github 仓库地址<br></code></pre></td></tr></table></figure><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/Github1.png" alt><br>如果显示origin已经存在,删除origin，并重新设置origin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote rm origin <br>$ git remote add origin https://github.com/ccbirds/hexo.git<br></code></pre></td></tr></table></figure><h3 id="6-添加文件"><a href="#6-添加文件" class="headerlink" title="6.添加文件"></a>6.添加文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add test.txt //指定一个文件<br>$ git add .    //目录下的所有文件<br>$ git commit -m <span class="hljs-string">"2020-02-27"</span> //备注<br>$ git push origin master<br>Username <span class="hljs-keyword">for</span> <span class="hljs-string">'https://github.com'</span>: ccbirds //输入用户名<br>Password <span class="hljs-keyword">for</span> <span class="hljs-string">'https://ccbirds@github.com'</span>:  //输入密码，密码不会显示<br>Writing objects: 100% (3/3), 277 bytes | 277.00 KiB/s, <span class="hljs-keyword">done</span>.<br>Total 3 (delta 0), reused 0 (delta 0)<br>To https://github.com/ccbirds/hexo.git<br>   da79977..341a1a4  master -&gt; master<br></code></pre></td></tr></table></figure><h3 id="这样就成功啦"><a href="#这样就成功啦" class="headerlink" title="这样就成功啦"></a>这样就成功啦</h3><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为使用hexo搭建的博客加入评论系统gitalk</title>
      <link href="/2020/02/27/%E4%B8%BA%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/"/>
      <url>/2020/02/27/%E4%B8%BA%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9Fgitalk/</url>
      
        <content type="html"><![CDATA[<p>使用hexo结合github搭建自己的个人博客网站，非常方便，而且免费，对于个人来说是一个不错的选择。不过有一个缺点是没有评论系统。需要自己额外引入评论插件。<br>现在常用的评论插件有三种：<br>disqus：已经被墙了，暂时不考虑。<br>gitment：基于github的一个评论系统，但是作者长时间没有维护，需要使用自己的服务器。<br>gitalk：也是基于github的一个评论系统，目前可以正常使用。<br>主题不同添加gitalk的方法也略有区别，有的主题本身带有gitalk评论，打开相应的开关就可以。我使用的主题是beantech，本身没有gitalk评论系统。</p><a id="more"></a><hr><h2 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h2><hr><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Register a new OAuth application</a><br><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/Gitalk1.png" alt><br>Application name：随便写。<br>Homepage URL：网站主页的地址<br>Application description：随便写<br>Authorization callback URL：网站主页地址<br><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/Gitalk2.png" alt><br>会生成Client ID与Client Secret。保存好后面会用到。<br><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/Gitalk3.png" alt></p><hr><h2 id="2-配置gitalk"><a href="#2-配置gitalk" class="headerlink" title="2.配置gitalk"></a>2.配置gitalk</h2><hr><h3 id="创建md5-min-js文件"><a href="#创建md5-min-js文件" class="headerlink" title="创建md5.min.js文件"></a>创建md5.min.js文件</h3><p>在主题目录source/js中创建md5.min.js文件，内容如下（代码引用自其他文章，链接在文章下方）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs plain">! function(n) &#123;<br>    &quot;use strict&quot;;<br>    function t(n, t) &#123;<br>        var r &#x3D; (65535 &amp; n) + (65535 &amp; t);<br>        return (n &gt;&gt; 16) + (t &gt;&gt; 16) + (r &gt;&gt; 16) &lt;&lt; 16 | 65535 &amp; r<br>    &#125;<br>    function r(n, t) &#123;<br>        return n &lt;&lt; t | n &gt;&gt;&gt; 32 - t<br>    &#125;<br>    function e(n, e, o, u, c, f) &#123;<br>        return t(r(t(t(e, n), t(u, f)), c), o)<br>    &#125;<br>    function o(n, t, r, o, u, c, f) &#123;<br>        return e(t &amp; r | ~t &amp; o, n, t, u, c, f)<br>    &#125;<br>    function u(n, t, r, o, u, c, f) &#123;<br>        return e(t &amp; o | r &amp; ~o, n, t, u, c, f)<br>    &#125;<br>    function c(n, t, r, o, u, c, f) &#123;<br>        return e(t ^ r ^ o, n, t, u, c, f)<br>    &#125;<br>    function f(n, t, r, o, u, c, f) &#123;<br>        return e(r ^ (t | ~o), n, t, u, c, f)<br>    &#125;<br>    function i(n, r) &#123;<br>        n[r &gt;&gt; 5] |&#x3D; 128 &lt;&lt; r % 32, n[14 + (r + 64 &gt;&gt;&gt; 9 &lt;&lt; 4)] &#x3D; r;<br>        var e, i, a, d, h, l &#x3D; 1732584193,<br>            g &#x3D; -271733879,<br>            v &#x3D; -1732584194,<br>            m &#x3D; 271733878;<br>        for (e &#x3D; 0; e &lt; n.length; e +&#x3D; 16) i &#x3D; l, a &#x3D; g, d &#x3D; v, h &#x3D; m, g &#x3D; f(g &#x3D; f(g &#x3D; f(g &#x3D; f(g &#x3D; c(g &#x3D; c(g &#x3D; c(g &#x3D; c(g &#x3D; u(g &#x3D; u(g &#x3D; u(g &#x3D; u(g &#x3D; o(g &#x3D; o(g &#x3D; o(g &#x3D; o(g, v &#x3D; o(v, m &#x3D; o(m, l &#x3D; o(l, g, v, m, n[e], 7, -680876936), g, v, n[e + 1], 12, -389564586), l, g, n[e + 2], 17, 606105819), m, l, n[e + 3], 22, -1044525330), v &#x3D; o(v, m &#x3D; o(m, l &#x3D; o(l, g, v, m, n[e + 4], 7, -176418897), g, v, n[e + 5], 12, 1200080426), l, g, n[e + 6], 17, -1473231341), m, l, n[e + 7], 22, -45705983), v &#x3D; o(v, m &#x3D; o(m, l &#x3D; o(l, g, v, m, n[e + 8], 7, 1770035416), g, v, n[e + 9], 12, -1958414417), l, g, n[e + 10], 17, -42063), m, l, n[e + 11], 22, -1990404162), v &#x3D; o(v, m &#x3D; o(m, l &#x3D; o(l, g, v, m, n[e + 12], 7, 1804603682), g, v, n[e + 13], 12, -40341101), l, g, n[e + 14], 17, -1502002290), m, l, n[e + 15], 22, 1236535329), v &#x3D; u(v, m &#x3D; u(m, l &#x3D; u(l, g, v, m, n[e + 1], 5, -165796510), g, v, n[e + 6], 9, -1069501632), l, g, n[e + 11], 14, 643717713), m, l, n[e], 20, -373897302), v &#x3D; u(v, m &#x3D; u(m, l &#x3D; u(l, g, v, m, n[e + 5], 5, -701558691), g, v, n[e + 10], 9, 38016083), l, g, n[e + 15], 14, -660478335), m, l, n[e + 4], 20, -405537848), v &#x3D; u(v, m &#x3D; u(m, l &#x3D; u(l, g, v, m, n[e + 9], 5, 568446438), g, v, n[e + 14], 9, -1019803690), l, g, n[e + 3], 14, -187363961), m, l, n[e + 8], 20, 1163531501), v &#x3D; u(v, m &#x3D; u(m, l &#x3D; u(l, g, v, m, n[e + 13], 5, -1444681467), g, v, n[e + 2], 9, -51403784), l, g, n[e + 7], 14, 1735328473), m, l, n[e + 12], 20, -1926607734), v &#x3D; c(v, m &#x3D; c(m, l &#x3D; c(l, g, v, m, n[e + 5], 4, -378558), g, v, n[e + 8], 11, -2022574463), l, g, n[e + 11], 16, 1839030562), m, l, n[e + 14], 23, -35309556), v &#x3D; c(v, m &#x3D; c(m, l &#x3D; c(l, g, v, m, n[e + 1], 4, -1530992060), g, v, n[e + 4], 11, 1272893353), l, g, n[e + 7], 16, -155497632), m, l, n[e + 10], 23, -1094730640), v &#x3D; c(v, m &#x3D; c(m, l &#x3D; c(l, g, v, m, n[e + 13], 4, 681279174), g, v, n[e], 11, -358537222), l, g, n[e + 3], 16, -722521979), m, l, n[e + 6], 23, 76029189), v &#x3D; c(v, m &#x3D; c(m, l &#x3D; c(l, g, v, m, n[e + 9], 4, -640364487), g, v, n[e + 12], 11, -421815835), l, g, n[e + 15], 16, 530742520), m, l, n[e + 2], 23, -995338651), v &#x3D; f(v, m &#x3D; f(m, l &#x3D; f(l, g, v, m, n[e], 6, -198630844), g, v, n[e + 7], 10, 1126891415), l, g, n[e + 14], 15, -1416354905), m, l, n[e + 5], 21, -57434055), v &#x3D; f(v, m &#x3D; f(m, l &#x3D; f(l, g, v, m, n[e + 12], 6, 1700485571), g, v, n[e + 3], 10, -1894986606), l, g, n[e + 10], 15, -1051523), m, l, n[e + 1], 21, -2054922799), v &#x3D; f(v, m &#x3D; f(m, l &#x3D; f(l, g, v, m, n[e + 8], 6, 1873313359), g, v, n[e + 15], 10, -30611744), l, g, n[e + 6], 15, -1560198380), m, l, n[e + 13], 21, 1309151649), v &#x3D; f(v, m &#x3D; f(m, l &#x3D; f(l, g, v, m, n[e + 4], 6, -145523070), g, v, n[e + 11], 10, -1120210379), l, g, n[e + 2], 15, 718787259), m, l, n[e + 9], 21, -343485551), l &#x3D; t(l, i), g &#x3D; t(g, a), v &#x3D; t(v, d), m &#x3D; t(m, h);<br>        return [l, g, v, m]<br>    &#125;<br><br>    function a(n) &#123;<br>        var t, r &#x3D; &quot;&quot;,<br>            e &#x3D; 32 * n.length;<br>        for (t &#x3D; 0; t &lt; e; t +&#x3D; 8) r +&#x3D; String.fromCharCode(n[t &gt;&gt; 5] &gt;&gt;&gt; t % 32 &amp; 255);<br>        return r<br>    &#125;<br><br>    function d(n) &#123;<br>        var t, r &#x3D; [];<br>        for (r[(n.length &gt;&gt; 2) - 1] &#x3D; void 0, t &#x3D; 0; t &lt; r.length; t +&#x3D; 1) r[t] &#x3D; 0;<br>        var e &#x3D; 8 * n.length;<br>        for (t &#x3D; 0; t &lt; e; t +&#x3D; 8) r[t &gt;&gt; 5] |&#x3D; (255 &amp; n.charCodeAt(t &#x2F; 8)) &lt;&lt; t % 32;<br>        return r<br>    &#125;<br><br>    function h(n) &#123;<br>        return a(i(d(n), 8 * n.length))<br>    &#125;<br><br>    function l(n, t) &#123;<br>        var r, e, o &#x3D; d(n),<br>            u &#x3D; [],<br>            c &#x3D; [];<br>        for (u[15] &#x3D; c[15] &#x3D; void 0, o.length &gt; 16 &amp;&amp; (o &#x3D; i(o, 8 * n.length)), r &#x3D; 0; r &lt; 16; r +&#x3D; 1) u[r] &#x3D; 909522486 ^ o[r], c[r] &#x3D; 1549556828 ^ o[r];<br>        return e &#x3D; i(u.concat(d(t)), 512 + 8 * t.length), a(i(c.concat(e), 640))<br>    &#125;<br><br>    function g(n) &#123;<br>        var t, r, e &#x3D; &quot;&quot;;<br>        for (r &#x3D; 0; r &lt; n.length; r +&#x3D; 1) t &#x3D; n.charCodeAt(r), e +&#x3D; &quot;0123456789abcdef&quot;.charAt(t &gt;&gt;&gt; 4 &amp; 15) + &quot;0123456789abcdef&quot;.charAt(15 &amp; t);<br>        return e<br>    &#125;<br>    function v(n) &#123;<br>        return unescape(encodeURIComponent(n))<br>    &#125;<br>    function m(n) &#123;<br>        return h(v(n))<br>    &#125;<br>    function p(n) &#123;<br>        return g(m(n))<br>    &#125;<br>    function s(n, t) &#123;<br>        return l(v(n), v(t))<br>    &#125;<br>    function C(n, t) &#123;<br>        return g(s(n, t))<br>    &#125;<br>    function A(n, t, r) &#123;<br>        return t ? r ? s(t, n) : C(t, n) : r ? m(n) : p(n)<br>    &#125;<br>    &quot;function&quot; &#x3D;&#x3D; typeof define &amp;&amp; define.amd ? define(function() &#123;<br>        return A<br>    &#125;) : &quot;object&quot; &#x3D;&#x3D; typeof module &amp;&amp; module.exports ? module.exports &#x3D; A : n.md5 &#x3D; A<br>&#125;(this);<br>&#x2F;&#x2F;# sourceMappingURL&#x3D;md5.min.js.map<br></code></pre></td></tr></table></figure><h3 id="在文章后面加入代码"><a href="#在文章后面加入代码" class="headerlink" title="在文章后面加入代码"></a>在文章后面加入代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;<br>&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;<br>&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;script src&#x3D;&quot;&#x2F;js&#x2F;md5.min.js&quot;&gt;&lt;&#x2F;script&gt;<br>&lt;script &gt;<br>var gitalk &#x3D; new Gitalk(&#123;<br>  clientID: &#39;GitHub Application Client ID&#39;,<br>  clientSecret: &#39;GitHub Application Client Secret&#39;,<br>  repo: &#39;GitHub repo&#39;,<br>  owner: &#39;GitHub repo owner&#39;,<br>  admin: [&#39;GitHub repo owner and collaborators, only these guys can initialize github issues&#39;],<br>  id: md5(location.pathname),      &#x2F;&#x2F; Ensure uniqueness and length less than 50<br>  distractionFreeMode: false  &#x2F;&#x2F; Facebook-like distraction free mode<br>&#125;)<br>gitalk.render(&#39;gitalk-container&#39;)<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure><p>clientID: 前面注册的clientID<br>clientSecret： 前面注册的clientSecret<br>repo： 保存评论的仓库名字，可以是XXX.github.io<br>owner： 仓库的拥有者，写自己的用户名就可以。<br>admin： 评论管理员，写自己的用户名就可以。<br>id： 按我写的不需要修改。一定要使用md5编码，不然会因为文章名字过长报错。<br>其他保持默认即可。</p><h3 id="gitalk初始化"><a href="#gitalk初始化" class="headerlink" title="gitalk初始化"></a>gitalk初始化</h3><p>将代码放到文章下方后，需要对gitalk初始化，gitalk不能自动初始化，手动初始化后，会在保存评论的仓库新建一个issue。<br><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/Gitalk4.png" alt><br>使用自己的github登录。会在仓库新建一个issue。</p><hr><p>这样就完成啦，比较简单。但是需要在每篇文章后面都加入代码，而且需要手动初始化。<br>可以在主题中加入gitalk，但是因为主题不同加入的方法也不同。<br>至于初始化，可以写个脚本自动初始化，正在学习中，后期和大家分享。如果大家有更好的方法，欢迎在评论中交流。</p><hr><p>参考文章：<br><a href="https://blog.csdn.net/am290333566/article/details/83714217" target="_blank" rel="noopener">https://blog.csdn.net/am290333566/article/details/83714217</a><br><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机无线投屏win10</title>
      <link href="/2020/02/27/%E6%89%8B%E6%9C%BA%E6%97%A0%E7%BA%BF%E6%8A%95%E5%B1%8Fwin10/"/>
      <url>/2020/02/27/%E6%89%8B%E6%9C%BA%E6%97%A0%E7%BA%BF%E6%8A%95%E5%B1%8Fwin10/</url>
      
        <content type="html"><![CDATA[<p>手机上屏幕小，看视频特别难受，并且有些软件没与PC版，应该怎么办?下面我来介绍一种方法，将手机屏幕投屏到电脑上。</p><hr><p>条件：1.装有win10的PC。<br>2. 手机具有无线投屏功能（现在大多数手机都有无线投屏功能，只是名字可能有些不同，下面一以荣耀V10手机为例给大家演示）</p><a id="more"></a><hr><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><hr><h3 id="1-PC端"><a href="#1-PC端" class="headerlink" title="1.PC端"></a>1.PC端</h3><hr><h4 id="使用搜索命令搜索“连接”"><a href="#使用搜索命令搜索“连接”" class="headerlink" title="使用搜索命令搜索“连接”"></a>使用搜索命令搜索“连接”</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F1.png" alt></p><h4 id="打开连接应用，"><a href="#打开连接应用，" class="headerlink" title="打开连接应用，"></a>打开连接应用，</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F2.png" alt></p><h4 id="记住你的无线投屏的名字，如果周围有多个设备时，不要选错哦。"><a href="#记住你的无线投屏的名字，如果周围有多个设备时，不要选错哦。" class="headerlink" title="记住你的无线投屏的名字，如果周围有多个设备时，不要选错哦。"></a>记住你的无线投屏的名字，如果周围有多个设备时，不要选错哦。</h4><hr><h3 id="2-手机端"><a href="#2-手机端" class="headerlink" title="2.手机端"></a>2.手机端</h3><hr><h4 id="打开设置"><a href="#打开设置" class="headerlink" title="打开设置"></a>打开设置</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F3.jpg" alt></p><h4 id="选择设备连接"><a href="#选择设备连接" class="headerlink" title="选择设备连接"></a>选择设备连接</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F4.jpg" alt></p><h4 id="选择无线投屏功能"><a href="#选择无线投屏功能" class="headerlink" title="选择无线投屏功能"></a>选择无线投屏功能</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F5.jpg" alt></p><h4 id="需要打开WLAN，它会搜索可使用设备。"><a href="#需要打开WLAN，它会搜索可使用设备。" class="headerlink" title="需要打开WLAN，它会搜索可使用设备。"></a>需要打开WLAN，它会搜索可使用设备。</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F6.jpg" alt><br><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F7.jpg" alt></p><h4 id="选择你的设备，不要选错哦。这样就就连接上了，看个视频试一下。"><a href="#选择你的设备，不要选错哦。这样就就连接上了，看个视频试一下。" class="headerlink" title="选择你的设备，不要选错哦。这样就就连接上了，看个视频试一下。"></a>选择你的设备，不要选错哦。这样就就连接上了，看个视频试一下。</h4><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/%E6%8A%95%E5%B1%8F8.png" alt></p><h4 id="点右上角按钮，可以全屏。"><a href="#点右上角按钮，可以全屏。" class="headerlink" title="点右上角按钮，可以全屏。"></a>点右上角按钮，可以全屏。</h4><hr><p>大家赶紧去试试吧。<br>有问题可以联系我，邮箱：<a href="mailto:hanbing3566@gmail.com">hanbing3566@gmail.com</a></p><hr><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 投屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu中使用pycharm有些快捷键无法使用</title>
      <link href="/2020/02/27/ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8pycharm%E6%9C%89%E4%BA%9B%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/02/27/ubuntu%E4%B8%AD%E4%BD%BF%E7%94%A8pycharm%E6%9C%89%E4%BA%9B%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>问题描述：在使用pycharm过程中，ctrl+c,ctrl+v,ctrl+d等快捷键无法使用。</p><p>解决办法：file-&gt;setting-&gt;Editor下面有一个Vim Emulation选项。</p><a id="more"></a><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/pycharm.png" alt><br>将Handler一列中的vim全部改为IDE，点Apply。</p><p><img src="https://ccbirds-blog.oss-cn-beijing.aliyuncs.com/blog_img/pycharm2.png" alt><br>这样，快捷键就可以正常使用啦。</p><p>博客网站  ：<br><a href="http://ccbirds.cn">ccbirds.cn</a><br><a href="https://ccbirds.github.io/" target="_blank" rel="noopener">ccbirds.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> python </tag>
            
            <tag> pcharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo] Theme BeanTech</title>
      <link href="/2017/03/18/hexo-theme-beantech/"/>
      <url>/2017/03/18/hexo-theme-beantech/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ported Theme of <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Hux Blog</a>, Thank <a href="https://github.com/Huxpro" target="_blank" rel="noopener">Huxpro</a> for designing such a flawless theme.</p><p>This BeanTech theme created by <a href="http://beantech.org" target="_blank" rel="noopener">YuHsuan</a> modified from the original Porter <a href="http://kaijun.rocks/hexo-theme-huxblog/" target="_blank" rel="noopener">Kaijun</a></p></blockquote><h1 id="Live-Demo"><a href="#Live-Demo" class="headerlink" title="Live Demo"></a><a href="http://beantech.org" target="_blank" rel="noopener">Live Demo</a></h1><hr><p><img src="http://beantech.org/img/beantech-desktop.png" alt="BeanTech Desktop"></p><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><hr><p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p><p>Let’s begin!!!</p><h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech<br><span class="hljs-built_in">cd</span> hexo-beantech<br>npm install<br></code></pre></td></tr></table></figure><h2 id="Modify"><a href="#Modify" class="headerlink" title="Modify"></a>Modify</h2><hr><p>Modify <code>_config.yml</code> file with your own info.<br>Especially the section:</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Replace to your own repo!</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">&lt;your-branch&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Sidebar-settings"><a href="#Sidebar-settings" class="headerlink" title="Sidebar settings"></a>Sidebar settings</h3><p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sidebar:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># whether or not using Sidebar.</span><br><span class="hljs-attr">sidebar-about-description:</span> <span class="hljs-string">"&lt;your description&gt;"</span><br><span class="hljs-attr">sidebar-avatar:</span> <span class="hljs-string">img/&lt;your</span> <span class="hljs-string">avatar</span> <span class="hljs-string">path&gt;</span><br></code></pre></td></tr></table></figure><p>and activate your personal widget you like</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">widgets:</span>         <span class="hljs-comment"># here are widget you can use, you can comment out</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">featured-tags</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">short-about</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">recent-posts</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">friends-blog</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">archive</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">category</span><br></code></pre></td></tr></table></figure><p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p><h3 id="Signature-Setup"><a href="#Signature-Setup" class="headerlink" title="Signature Setup"></a>Signature Setup</h3><p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">signature:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># show signature</span><br><span class="hljs-attr">signature-img:</span> <span class="hljs-string">img/signature/&lt;your-signature-ID&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Go-to-top-icon-Setup"><a href="#Go-to-top-icon-Setup" class="headerlink" title="Go to top icon Setup"></a>Go to top icon Setup</h3><p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p><h3 id="Post-tag"><a href="#Post-tag" class="headerlink" title="Post tag"></a>Post tag</h3><p>You can decide to show post tags or not.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">home_posts_tag:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/.cn//home_posts_tag-true.png" alt="home_posts_tag-true"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">home_posts_tag:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="/.cn//home_posts_tag-false.png" alt="home_posts_tag-false"></p><h3 id="Markdown-render"><a href="#Markdown-render" class="headerlink" title="Markdown render"></a>Markdown render</h3><p>My markdown render engine plugin is <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">hexo-renderer-markdown-it</a>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Markdown-it config</span><br><span class="hljs-comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><br><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">'“”‘’'</span><br></code></pre></td></tr></table></figure><p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span>(<span class="hljs-string">"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js"</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        anchors.options = &#123;<br>          <span class="hljs-attr">visible</span>: <span class="hljs-string">'hover'</span>,<br>          <span class="hljs-attr">placement</span>: <span class="hljs-string">'left'</span>,<br>          <span class="hljs-attr">icon</span>: ℬ <span class="hljs-comment">// this is the header anchor "unicode" icon</span><br>        &#125;;<br></code></pre></td></tr></table></figure><h2 id="Hexo-Basics"><a href="#Hexo-Basics" class="headerlink" title="Hexo Basics"></a>Hexo Basics</h2><hr><p>Some hexo command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post <span class="hljs-string">"&lt;post name&gt;"</span> <span class="hljs-comment"># you can change post to another layout if you want</span><br>hexo clean &amp;&amp; hexo generate <span class="hljs-comment"># generate the static file</span><br>hexo server <span class="hljs-comment"># run hexo in local environment</span><br>hexo deploy <span class="hljs-comment"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span><br></code></pre></td></tr></table></figure><h1 id="Have-fun"><a href="#Have-fun" class="headerlink" title="Have fun ^_^"></a>Have fun ^_^</h1><hr><!-- Place this tag in your head or just before your close body tag. --><script async defer src="https://buttons.github.io/buttons.js"></script><!-- Place this tag where you want the button to render. --><p>Please <a class="github-button" href="https://github.com/YenYuHsuan/hexo-theme-beantech" target="_blank" rel="noopener" data-icon="octicon-star" aria-label="Star YenYuHsuan/hexo-theme-beantech on GitHub">Star</a> this Project if you like it! <a class="github-button" href="https://github.com/YenYuHsuan" target="_blank" rel="noopener" aria-label="Follow @YenYuHsuan on GitHub">Follow</a> would also be appreciated!<br>Peace!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
